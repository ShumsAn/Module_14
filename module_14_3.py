from aiogram import Bot,Dispatcher,executor,types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State,StatesGroup
from aiogram.types import ReplyKeyboardMarkup,KeyboardButton
from aiogram.types import InlineKeyboardMarkup,InlineKeyboardButton


api = ''
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

kb = ReplyKeyboardMarkup(resize_keyboard=True)
button = KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button2 = KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
button_buy = KeyboardButton(text='–ö—É–ø–∏—Ç—å')
kb.row(button,button2)
kb.add(button_buy)

#C–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ –∏—Ö –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ
products = {1: 'Product1', 2: 'Product2', 3: 'Product3', 4: 'Product4'}
#–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
kb_buy = InlineKeyboardMarkup(row_width=2)
for product in products.values():
    kb_buy.add(InlineKeyboardButton(text=product,callback_data='product_buying'))

#–ö–Ω–æ–ø–∫–∏ –ø–æ  –∑–∞–¥–∞–Ω–∏—è–º –¥–æ module_14_3
button3 = InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞',callback_data='formulas')
kb2 = InlineKeyboardMarkup(row_width=2).add(button3)
kb2.add(InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π',callback_data='calories'))

kb3 = InlineKeyboardMarkup(resize_keyboard=True)
button5 = InlineKeyboardButton(text='–ú',callback_data='men')
button6 = InlineKeyboardButton(text='–ñ',callback_data='women')
kb3.add(button5,button6)

start = False
@dp.message_handler(commands=['start'])
async def start_message(message):
     await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.",reply_markup= kb)
     global start
     start = True

"""–•—ç–Ω–¥–ª–µ—Ä—ã –ø–æ–∫—É–ø–∫–∏... –ø–æ  module_14_3"""

@dp.message_handler(text = '–ö—É–ø–∏—Ç—å')
async def get_buying_list(message):
    for key,value in products.items():
        with open('product_image.jpg', 'rb') as img:
            await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ:{value} |–û–ø–∏—Å–∞–Ω–∏–µ:{key} |–¶–µ–Ω–∞:{key * 100}')
            await message.answer_photo(img)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=kb_buy)

@dp.callback_query_handler(text = 'product_buying')
async def send_confirm_message(call):
     await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")

"""–î–∞–ª–µ–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –ø–æ –ø–æ–¥—Å—á–µ—Ç—É –∫–∞–ª–æ—Ä–∏–π..."""
@dp.callback_query_handler(text = 'formulas')
async def get_formulas(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(
        callback_query.id,
        text='–¥–ª—è –º—É–∂—á–∏–Ω: 10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5; \n'
             '–¥–ª—è –∂–µ–Ω—â–∏–Ω: 10 x –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 x –≤–æ–∑—Ä–∞—Å—Ç (–≥) ‚Äì 161 üòâ', show_alert=True)

@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def inform(message):
    await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n'
                         f'–ë–æ—Ç —É–º–µ–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞ - –°–∞–Ω –ñ–µ–æ—Ä–∞\n'
                         f'–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"')

@dp.message_handler(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
async def main_menu(message):
    await message.answer('–í—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é:',reply_markup= kb2)
class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()
    gender = State()

@dp.callback_query_handler(text = 'calories')
async def set_gender(call):
    await call.message.answer('–í—ã–±—Ä–∞—Ç—å –ø–æ–ª:', reply_markup=kb3)
    await call.answer()
    await UserState.gender.set()

@dp.callback_query_handler(text = ('men','women'),state=UserState.gender)
async def set_age(call,state):
    await state.update_data(gender=call.data)
    await call.answer()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await UserState.age.set()

@dp.message_handler(state=UserState.age)
async def  set_growth(message, state):
    await state.update_data(age = message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()
@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth = message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await UserState.weight.set()

@dp.message_handler(state=UserState.weight)
async def  send_calories(message, state):
    await state.update_data(weight = message.text)
    data = await state.get_data()
    await state.finish()
    try:
        if data['gender'] =='men':
            calorie_allowance_men = float(data['weight']) * 10 + float(data['growth']) * 6.25 - float(data['age']) * 4.92 + 5
            await message.answer(f'–ú—É–∂—Å–∫–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_allowance_men}')
        elif data['gender'] =='women':
            calorie_allowance_women = float(data['weight']) * 10 + float(data['growth']) * 6.25 - float(
                data['age']) * 4.92 - 161
            await message.answer(f'–ñ–µ–Ω—Å–∫–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_allowance_women}')
    except:
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞–ª –Ω–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        await message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É')

@dp.message_handler()
async def all_message(message):
    if start == False:
       await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')
    else:
        await message.answer(message.text + ' - –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')

if __name__ == "__main__":
    executor.start_polling(dp,skip_updates=True)








